#+AUTHOR: Mario Raul Freitas
#+TITLE: Curso de Python - Dia 1
#+EMAIL: mariofreitas.enc@gmail
#+options: toc:nil
#+OPTIONS: H:2
#+LATEX_CLASS: beamer
#+BEAMER_THEME: Madrid
#+REVEAL_THEME: solarized
#+REVEAL_PLUGINS: (highlight)

* Quem Somos Nós
*** CivCom
[[file:img/Quem Somos Nós/logo2_2016-08-06_17-14-32.png]]

 Pesquisa, Cursos e Inovação
* O Que Será Dado no Curso
| Como Instalar Python        | Como Instalar Bibliotecas |
| Prints e Inputs             | Strings                   |
| Ints e Floats               | Lists e Tuples            |
| Dictionaries                | Funções                   |
| Control Flow                | Loops                     |
| Numpy                       | Matplotlib                |
| Object Oriented Programming | GUI e PyQt                |
* Porque Python?
Python é uma linguagem extremamente simples, mas ao mesmo tempo, muito poderas. Ela permite criar todo tipo de software, desde calculadoras a websites passando por jogos e aplicativos de celular.

Python é grátis e possui uma comunidade extremamente ativa. Há uma inifinidade de bibliotecas que facilitam a sua vida.

Python é utilizado por diversas empresas, como:
*** YouTube
*** Dropbox
*** Spotify
*** BitTorrent
*** Reddit
*** Serpro
*** Frets on Fire (Guitar Hero Clone)
*** CivCom
* Como Instalar Python
Baixe Python 3.5.2 do site: https://www.python.org/

Alternativamente, você pode baixar o pacote miniconda de: http://conda.pydata.org/miniconda.html

Ou o pacote anaconda de: https://www.continuum.io/downloads

Recomendamos que você utilize a primeira opção
*** Tutorial Disponível Em Nosso Site
https://civcomunb.wordpress.com/2016/07/06/hello-world/#more-36
* Pip
Pip é uma ferramenta do Python que serve para instalar bibliotecas disponíveis no PyPI (Python Package Index), que é um repositório oficial de biblioteca do Python.

Para utiliza-la, basta abrir o prompt de comando (cmd) e digitar:
#+BEGIN_EXAMPLE 
pip install "nome_da_biblioteca"
#+END_EXAMPLE

*** Instalar NumPy
Para instalar o NumPy digite no cmd:
#+BEGIN_EXAMPLE 
pip install numpy
#+END_EXAMPLE

*** Intalar Matplotlib
Para instalar o Matplotlib digite no cmd:
#+BEGIN_EXAMPLE 
pip install matplotlib
#+END_EXAMPLE

* Instalar PyQt4
O PyQt 4 não está presente no PyPI e, portanto, não pode ser baixado pelo pip. No entanto, seu instalador pode ser  encontrado no link a seguir: https://www.riverbankcomputing.com/software/pyqt/download

Baixe e instale normalmente. Note que será necessário baixar a versão do PyQt compatível com o seu Python.
* Recomendação de IDE
Caso deseje programar com muito mais facilidade, recomendamos que baixe o PyCharm no seguinte link: https://www.jetbrains.com/pycharm/download/#section=windows

O PyCharm é uma IDE (Integrated Development Environment), ou seja, um editor para o seu código que contém ferramentas que irão tornar a programação mais fácil. Por exemplo: auto-completar, código de cores, acesso rápido à documentação, entre outros.
* IDLE
O IDLE possui duas janelas. Um editor de texto, onde você pode escrever seus Scripts, e um interpretador, chamado IDLE Shell.

Seus códigos sempre vão rodar em um interpretador.
* Hello World
Com tudo instalado, agora podemos rodar nosso primeiro programa. Abra o IDLE, que deve aparecer no seu menu Iniciar após a instalção do Python. Agora digite o seguinte código e o rode:

#+BEGIN_SRC python :results output :exports both
print('Hello, World!')
#+END_SRC

#+RESULTS:
: Hello, World!


*** Input
#+BEGIN_SRC python :results output
nome = input('Qual é o seu nome? ')
print('Oi {}, como você está?'.format(nome))
#+END_SRC

#+BEGIN_EXAMPLE
Oi Mario, como você está?
#+END_EXAMPLE
* Variáveis
Variáveis são "caixas" que guardam um tipo de informação.

Python irá criar uma "caixa" no momento em que você nomear e der valor a sua variável

Junto ao conteúdo, o Python define o tipo de conteúdo e "cola uma etiqueta" na caixa para descrever o tipo
*** Regras para nomes de Variáveis
Uma palavra só, sem espaços;

Deve começar com uma letra;

Não pode ser uma palavra reservada do Python.
* Strings
String é uma variável que guarda uma série de caracteres, ou texto.

*** Definindo uma String
#+BEGIN_SRC python :session :results output :exports both
s1 = 'Isso é uma string'     # Isso é um comentário
s2 = 'Outra string.'
print(s1)
print(s2)
#+END_SRC

#+RESULTS:
: 
: >>> Isso é uma string
: Outra string.

*** Concatenando Strings
#+BEGIN_SRC python :session :results output :exports both
print(s1+s2)
print(s1 + '. ' + s2)

#+END_SRC

#+RESULTS:
: Isso é uma stringOutra string.
: Isso é uma string. Outra string.


*** Inserindo uma string dentro de outra com %s
#+BEGIN_SRC python :session :results output :exports both
print('Texto: %s' % s1)
print()
print('Texto 1: %s\nTexto 2: %s' % (s1, s2)) 
#+END_SRC

#+RESULTS:
: Texto: Isso é uma string
: 
: Texto 1: Isso é uma string
: Texto 2: Outra string.

*** Inserindo uma string dentro de outra com format
#+BEGIN_SRC python :session :results output :exports both
print('Texto: {}'.format(s1))
print()
print('Texto 1: {}\nTexto 2: {}'.format(s1, s2))
#+END_SRC

#+RESULTS:
: Texto: Isso é uma string
: 
: Texto 1: Isso é uma string
: Texto 2: Outra string.


*** Múltiplos argumentos em print
#+BEGIN_SRC python :session :results output :exports both
print('Texto:', s1)
#+END_SRC

#+RESULTS:
: Texto: Isso é uma string

*** Métodos de Capitalização
#+BEGIN_SRC python :session :results output  :exports both
print(s2.upper())
print(s2.lower())
print(s2.capitalize())
print(s2.swapcase()) 
#+END_SRC

#+RESULTS:
: OUTRA STRING.
: outra string.
: Outra string.
: oUTRA STRING.
*** Exercício 
Escreva um programa que pede o nome de 3 alunos (input: str) e os salva em 3 variáveis distintas (aluno1, aluno2, aluno3). Em seguida, faça com que o programa imprima os 3 nomes seguindo a formatação mostrada abaixo: 

#+BEGIN_EXAMPLE
Aluno
aluno1
aluno2
aluno3
#+END_EXAMPLE

Dica: Utilizar \n dentro de uma string pula uma linha no print (como um Enter). Alternativamente, use múltiplos prints.
*** Resolução
#+BEGIN_SRC python 
aluno1 = input('Digite o nome do 1o aluno: ')
aluno2 = input('Digite o nome do 2o aluno: ')
aluno3 = input('Digite o nome do 3o aluno: ')

print('Aluno')
print(aluno1)
print(aluno2)
print(aluno3)
#+END_SRC
* Ints e Floats
Ints são números inteiros e Floats são números reais. Operações entre ints e floats sempre resultam em floats. Divisão sempre resulta em float.
*** Definindo um Int
#+BEGIN_SRC python :session :results output :exports both
i1 = 5
i2 = 3
print(i1, type(i1))
#+END_SRC

#+RESULTS:
: 
: >>> 5 <class 'int'>
*** Definindo um Float
#+BEGIN_SRC python :session :results output :exports both
f1 = 5.
f2 = 3.0
print(f1, type(f1))
#+END_SRC

#+RESULTS:
: 
: >>> 5.0 <class 'float'>
*** Operações - Soma e Subtração
#+BEGIN_SRC python :session :results output :exports both
print(i1+i2)
print(i1-i2) 
print(i1+f1)
#+END_SRC

#+RESULTS:
: 8
: 2
: 10.0
*** Operações - Multiplicação
#+BEGIN_SRC python :session :results output :exports both
print(5*3, type(5*3)) 
print(5*0.2, type(5*0.2))
#+END_SRC

#+RESULTS:
: 15 <class 'int'>
: 1.0 <class 'float'>

*** Operações - Divisão Real
#+BEGIN_SRC python :session :results output :exports both
print(5/3, type(5/3))
print(6/3, type(6/3))

#+END_SRC

#+RESULTS:
: 1.6666666666666667 <class 'float'>
: 2.0 <class 'float'>
*** Operações - Divisão Inteira
#+BEGIN_SRC python :session :results output :exports both
print(11//3, type(11//3))
print(11%3, type(11%3))
#+END_SRC

#+RESULTS:
: 3 <class 'int'>
: 2 <class 'int'>

*** Operações - Arredondamentos
#+BEGIN_SRC python :session :results output :exports both
print(int(11/3))
print(round(11/3))

from math import ceil
print(ceil(10/3))
#+END_SRC

#+RESULTS:
: 3
: 4
: >>> >>> 4

*** Operações - Exponenciação
#+BEGIN_SRC python :session :results output :exports both
print(3**2)
#+END_SRC

#+RESULTS:
: 9
*** Operações - Radiciação
#+BEGIN_SRC python :session :results output :exports both
from math import sqrt
print(sqrt(4))
#+END_SRC

#+RESULTS:
: 
: 2.0
*** Exercício
Adicione a seu programa a seguinte funcionalidade: pedir a matrícula (int) e nota (float) de 3 alunos e salvar em 6 variáveis distintas (mat1, mat2 ,mat3 e nota1, nota2, nota3). Em seguida, faça com que o programa imprima os nomes, matrículas e notas formatados da seguinte forma: 
#+BEGIN_EXAMPLE
Aluno      Matrícula    Nota
aluno1     mat1         nota1
aluno2     mat2         nota2
aluno3     mat3         nota3
#+END_EXAMPLE

Dica: input() sempre returna uma string. Para obter int use int(input()) e para obter um float use float(input())
*** Resolução
#+BEGIN_SRC python
mat1 = int(input('Matrícula 1: '))
mat2 = int(input('Matrícula 2: '))
mat3 = int(input('Matrícula 3: '))

nota1 = float(input('Nota 1: '))
nota2 = float(input('Nota 2: '))
nota3 = float(input('Nota 3: '))

print('\nAluno\tMatrícula\tNota')
print('{}\t{}\t\t{}'.format(aluno1, mat1, nota1))
print('{}\t{}\t\t{}'.format(aluno2, mat2, nota2))
print('{}\t{}\t\t{}'.format(aluno3, mat3, nota3))
#+END_SRC
* Lists e Tuples
Lists e Tuples são sequências de variáveis separadas por vírgulas armazendas em uma única variável. 

Lists são mutáveis, enquanto tuples são imutáveis.

Apesar de terem um uso mais limitado, tuples são mais rápidas do que lists e podem ser necessárias em certas aplicações.
*** Definindo um tuple
#+BEGIN_SRC python :session :results output :exports both
t1 = (0, 1, 2, 3)
t2 = ('a', 'b', 'c')
print(t1, type(t1))

#+END_SRC

#+RESULTS:
: 
: >>> (0, 1, 2, 3) <class 'tuple'>

*** Definindo uma list
#+BEGIN_SRC python :session :results output :exports both
l1 = [0, 1, 2, 3]
l2 = ['a', 'b', 'c']
print(l2, type(l2))

#+END_SRC

#+RESULTS:
: 
: >>> ['a', 'b', 'c'] <class 'list'>
*** Transformando um no outro 
#+BEGIN_SRC python :session :results output :exports both
print(tuple(l2), type(tuple(l2)))
print(list(t1), type(list(t1)))

#+END_SRC

#+RESULTS:
: ('a', 'b', 'c') <class 'tuple'>
: [0, 1, 2, 3] <class 'list'>
*** Slicing
#+BEGIN_SRC python :session :results output :exports both
# l2 = ['a', 'b', 'c']
print(l2[1])
print(l2[-1]) 
#+END_SRC

#+RESULTS:
: 
: b
: c

#+BEGIN_SRC python :session :results output :exports both
#l1 = [0, 1, 2, 3]
print(t1[0:2])
print(l1[0:-1])
print('String aceita slice'[0:10])
#+END_SRC

#+RESULTS:
: 
: (0, 1)
: [0, 1, 2]
: String ace

#+BEGIN_SRC python :session :results output :exports both
print('String aceita slice'[0:10:2])
print('String aceita slice'[::-1])
#+END_SRC

#+RESULTS:
: Srn c
: ecils atieca gnirtS


*** Fazendo Alterações com Slicing
#+BEGIN_SRC python :session :results output :exports both
l2[1] = 'h'
print(l2)
#+END_SRC

#+RESULTS:
: 
: ['a', 'h', 'c']
*** Métodos de Listas
#+BEGIN_SRC python :session :results output :exports both
print(t2.index('c'))

l1.append(4)
print(l1) 

#+END_SRC

#+RESULTS:
: 2
: >>> >>> [0, 1, 2, 3, 4]

*** Comprimento
#+BEGIN_SRC python :session :results output :exports both
print(len(t1))
print(len(l2)) 
print(len('Strings têm comprimento')) 

#+END_SRC

#+RESULTS:
: 4
: 3
: 24
*** Enumerate e Zip
#+BEGIN_SRC python :results output :exports both
alunos = ['João', 'Maria', 'Carlos']
notas = [10, 6, 8]

print(enumerate(alunos))
print(list(enumerate(alunos)))

print(zip(alunos, notas))
print(list(zip(alunos, notas)))
#+END_SRC

#+RESULTS:
: <enumerate object at 0x00000000011D8F78>
: [(0, 'João'), (1, 'Maria'), (2, 'Carlos')]
: <zip object at 0x00000000011DB508>
: [('João', 10), ('Maria', 6), ('Carlos', 8)]

*** Range
Range é um outro tipo de variável que se parece com Tuple. Você pode gerar um range utilizando a função range(). Ela pode ser usada como range(n) ou range(n_i, n_f, passo). Podemos transformar o range diretamente em tuple para trabalhar com algo mais familiar.

#+BEGIN_SRC python :session :results output :exports both
print(range(3))
print(tuple(range(3)))  
print(tuple(range(2, 12, 2)))

#+END_SRC

#+RESULTS:
: range(0, 3)
: (0, 1, 2)
: (2, 4, 6, 8, 10)
*** Lista de Listas (ou tuples)
#+BEGIN_SRC python :results output :exports both
a = [[1, 2, 3], [4, 5, 6], [7, 8 ,9]]

print(a[1])
print(a[1][2])
print(sum(a[1]))
#+END_SRC

#+RESULTS:
: [4, 5, 6]
: 6
: 15

*** Exercício
Utilize os dados a seguir e crie uma lista de nomes, uma lista de  matrículas e uma lista de notas. A lista de notas será uma lista de listas em que a lista interna possui 3 elementos. Calcule a média de notas de cada aluno e imprima segundo a formatação abaixo:
#+BEGIN_EXAMPLE
Alunos: Alice, Beatriz, Carlos
Matrículas: 1, 2, 3
Notas:
  - Alice: 10, 7.5, 8.3
  - Beatriz: 8.8, 5.6, 5.0
  - Carlos: 3.4, 6.6, 7.7
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Aluno    Matrícula    Média
Alice    1            M1
Beatriz  2            M2
Carlos   3            M3
#+END_EXAMPLE

Dica: utilize as funções sum()e len() e o método append(). Guarde as médias em uma nova lista.
*** Resolução
#+BEGIN_SRC python :results output :exports both
alunos = ['Alice', 'Beatriz', 'Carlos']
mats = [1, 2, 3]
notas = [[10, 7.5, 8.3], [8.8, 5.6, 5.0], [3.4, 6.6, 7.7]]

medias = []
medias.append(sum(notas[0])/len(notas[0]))
medias.append(sum(notas[1])/len(notas[1]))
medias.append(sum(notas[2])/len(notas[2]))

print('Alunos\t\tMatrícula\tMédia')
print('{}\t\t{}\t\t{:.1f}'.format(alunos[0], mats[0], medias[0]))
print('{}\t\t{}\t\t{:.1f}'.format(alunos[1], mats[1], medias[1]))
print('{}\t\t{}\t\t{:.1f}'.format(alunos[2], mats[2], medias[2]))
#+END_SRC

#+RESULTS:
: Alunos		Matrícula	Média
: Alice		1		8.6
: Beatriz		2		6.5
: Carlos		3		5.9

* Dictionaries
Dicionários são uma espécie de lista desorganizada que possuem a seguinte estrutura {chave: valor}.

Dicionários são objetos mutáveis e desorganizados.

A ordem em que os itens aparecem ao dar print é "aleatória".
*** Definindo um dicionário
#+BEGIN_SRC python :session :results output :exports both
d1 = {'azul': 'blue', 'rosa': 'pink', 'preto': 'black'}
d2 = {'banana': 1, 'uva': 3, 'morango': 6}
d3 = {'banana': 4, 'uva': 1, 'pera': 12}
print(d1, type(d1))
#+END_SRC

#+RESULTS:
: 
: >>> >>> {'rosa': 'pink', 'azul': 'blue', 'preto': 'black'} <class 'dict'>
*** Acessando um Dicionário
#+BEGIN_SRC python :session :results output :exports both
print(d1['azul']) 
print(d2['banana'])
#+END_SRC

#+RESULTS:
: blue
: 1

#+BEGIN_SRC python :session :results output
item = input('Qual produto você deseja consultar o estoque? ')
print(d2[item], item + '(s)', 'no estoque')

#+END_SRC


*** Chaves e Valores
#+BEGIN_SRC python :session :results output :exports both
print(d2.keys()) 
print(d2.values()) 
print(d2.items())

#+END_SRC

#+RESULTS:
: dict_keys(['uva', 'morango', 'banana'])
: dict_values([3, 6, 1])
: dict_items([('uva', 3), ('morango', 6), ('banana', 1)])

*** Alterando valores
#+BEGIN_SRC python :session :results output :exports both
d2['banana'] += 1
# d2['banana'] = d2['banana'] + 1 
print(d2)

d2['suco'] = 1
print(d2)
#+END_SRC

#+RESULTS:
: 
: ... {'uva': 1, 'morango': 6, 'banana': 5, 'pera': 12}
: >>> >>> {'uva': 1, 'morango': 6, 'banana': 5, 'suco': 1, 'pera': 12}
*** Exercício
Utilizando os resultados do exercício anterior, armazene os nomes e médias dos alunos como {chave:valor} de um dicionário. Em seguida implemente uma funcionalidade em que o programa pede o nome de um aluno e retorna a média dele.

#+BEGIN_EXAMPLE
Aluno        Média
Alice        8.6
Beatriz      6.5
Carlos       5.9
#+END_EXAMPLE

#+BEGIN_EXAMPLE
{aluno : média}
print: A média de 'fulano' foi 'tanto'
#+END_EXAMPLE

Dica: Utilize input().
*** Resolução
#+BEGIN_SRC python :results output :exports both
alunos = ['Alice', 'Beatriz', 'Carlos']
medias = [8.6, 6.5, 5.9]

d = {alunos[0]:medias[0], alunos[1]:medias[1], alunos[2]:medias[2]}
nome = input('Digite o nome do aluno que deseja saber a média: ')

print('A média de {} foi {}'.format(nome, d[nome]))
#+END_SRC


* Funções e Condicionais
*** Funções
Funções são rotinas que tomam parâmetros de entrada, realizam um conjunto de operações e retornam um resultado. É importante resssaltar que todo e qualquer variável criada dentro da função não pode ser acessada fora dela.

Argumentos são um sinônimo para parâmetros
*** Condicionais (Control Flow)
Condicionais são bifurcações no código, em que se a condiação for verdadeira, o programa irá realizar um conjunto de operações e se ela for falsa o programa avança para a próxima etapa. Pode-se definir outra condicional que é testada caso a primeira seja falsa. Ainda é possível adicionar uma rotina para o caso em que todas as condicionais anteriores sejam falsas.
*** Definindo uma Função
#+BEGIN_SRC python :results output :exports both
def say_hi():
    print('Hi')

say_hi() 

#+END_SRC

#+RESULTS:
: Hi


*** Argumentos obrigatórios e opcionais
#+BEGIN_SRC python :results output :exports both
def sum3(a, b=0, c=0):
    resp = a + b + c
    return resp

a = 10
b = 5
c = 12

print(sum3(a, b, c))
print(sum3(a, b))
print(sum3(a))
print(sum3(5, c=7))
#+END_SRC

#+RESULTS:
: 27
: 15
: 10
: 12

*** Lambda
#+BEGIN_SRC python :results output :exports both
sum3_lambda = lambda a, b=0, c=0: a+b+c
print(sum3_lambda(1, 3, 5))
#+END_SRC

#+RESULTS:
: 9
*** Operadores Lógicos e Booleanos
| Maior que        | >     |
| Menor que        | <     |
| Igual a          | ==    |
| Maior ou igual a | >=    |
| Menor ou igual a | <=    |
| Diferente de     | !=    |
| Verdadeiro       | True  |
| Falso            | False |
| E                | and   |
| Ou               | or    |
| Não (Negação)    | not   |


*** Operadores Lógicos e Booleanos - Exemplos
#+BEGIN_SRC python :results output :exports both
print(3>2)
print(10!=4)
print(3>=10)
#+END_SRC

#+RESULTS:
: True
: True
: False

#+BEGIN_SRC python :results output :exports both
print(True or False)
print(True and False)
print(not True)
#+END_SRC

#+RESULTS:
: True
: False
: False
*** Definido uma condicional
#+BEGIN_SRC python :session :results output :exports both
def ver_dig_if(n):
    if n < 10:
        print('Número de 1 dígito')
    elif n < 100:
        print('Número de 2 dígitos')
    else:
        print('Número de 3 dígitos ou mais')

ver_dig_if(10)
#+END_SRC

#+RESULTS:
: 
: ... ... ... ... ... ... >>> Número de 2 dígitos

#+BEGIN_SRC python :session :results output :exports both
def ver_dig_str(n):
    n = str(n)
    n_len = len(n)
    if len == 1:
        print('Número de 1 dígito')
    else: 
        print('Número de %d dígitos' % n_len)

ver_dig_str(1245012369126401)
#+END_SRC

#+RESULTS:
: 
: ... ... ... ... ... ... >>> Número de 16 dígitos
*** Exercício 1
Faça uma função que toma uma lista de notas e calcula a média.

#+BEGIN_EXAMPLE
media([10, 9, 8]) >>> Resultado:  9
#+END_EXAMPLE
*** Resolução 1
#+BEGIN_SRC python :results output :exports both
def media(l):
    m = sum(l)/len(l)
    return m

print(media([10, 9, 8]))
#+END_SRC

#+RESULTS:
: 9.0
*** Excercício 2
Faça uma função que toma uma média e calcula a menção (padrão UnB).

#+BEGIN_EXAMPLE
média >= 9: SS
9 > média >= 7: MS
7 > média >= 5: MM
5 > média >= 3: MI
3 > média >= 0.1: II
média == 0: SR
#+END_EXAMPLE
*** Resolução 2
#+BEGIN_SRC python :results output :exports both
def menc(media):
    if media >= 9:
        return 'SS'
    elif media >= 7:
        return 'MS'
    elif media >= 5:
        return 'MM'
    elif media >= 3:
        return 'MI'
    elif media >= 0.1:
        return 'II'
    else:
        return 'SR'

print(menc(9.5))
print(menc(7.3))
print(menc(6.1))
print(menc(4.9))
print(menc(1.3))
print(menc(0))
#+END_SRC

#+RESULTS:
: SS
: MS
: MM
: MI
: II
: SR

* Loops
Loops for tomam uma sequência como 'argumento' e percorrem a lista até o fim. A sequência pode ser uma lista, tuple, dicionário, range ou string

Loops while tomam um booleano (Verdadeiro ou Falso) como argumento e continaum rodando equanto o booleano for True. Booleano pode ser interpretado como uma 'condição'
*** Definindo um loop for 
#+BEGIN_SRC python :results output :exports both
# Soma dos números de 1 a 10
n = 10
s = 0

for i in range(1, n+1, 1): 
    s = s + i   

print('A soma dos números de 1 a {} é {}'.format(n, s))
#+END_SRC

#+RESULTS:
: A soma dos números de 1 a 10 é 55

*** Definindo um loop while
#+BEGIN_SRC python :results output :exports both
# Descobre quando a soma dos números de 1 a inifinito passa de 40

senha = 'SENC16'
tentativa = ''

while tentativa != senha: 
    tentativa = input('Digite a senha: ')

print('Senha Correta!')  

#+END_SRC
*** Loop em dicionário - Chaves
#+BEGIN_SRC python :results output :exports both
d = {'node1': (0, 0), 'node2': (1, 1), 'node3': (2, 0)}
for key in d:
    print(key)

print()
for key in d.keys():
    print(key)
#+END_SRC

#+RESULTS:
: node2
: node1
: node3
: 
: node2
: node1
: node3
*** Loop em dicionário - Valores
#+BEGIN_SRC python :results output :exports both
d = {'node1': (0, 0), 'node2': (1, 1), 'node3': (2, 0)}
for value in d.values():
    print(value)

print()
for key in d:
    print(d[key])

#+END_SRC

#+RESULTS:
: (2, 0)
: (1, 1)
: (0, 0)
: 
: (2, 0)
: (1, 1)
: (0, 0)

*** Loop em dicionário - Melhor Método
#+BEGIN_SRC python :results output :exports both
d = {'node1': (0, 0), 'node2': (1, 1), 'node3': (2, 0)}

for key, value in d.items():
    print('{}:{}'.format(key, value))
#+END_SRC

#+RESULTS:
: node2:(1, 1)
: node1:(0, 0)
: node3:(2, 0)

*** Loop em listas
#+BEGIN_SRC python :results output :exports both
x = [1, 2, 3, 4, 5]
y = []

for i in x:
    y.append(i**2)

print(y) 
#+END_SRC

#+RESULTS:
: [1, 4, 9, 16, 25]
*** Loops utilizando range(len(l))
#+BEGIN_SRC python :results output :exports both
aposta = [2, 7, 21, 33, 49, 60]
resultado = [1, 14, 21, 32, 33, 34]

corretos = 0
for i in range(len(aposta)):
    if aposta[i] in resultado:
        corretos += 1
        print('{}o  número correto ({})'.format(i+1, aposta[i]))

print('{} números corretos'.format(corretos))

#+END_SRC

#+RESULTS:
: 3o  número correto (21)
: 4o  número correto (33)
: 2 números corretos
*** Loops usando enumerate
#+BEGIN_SRC python :results output :exports both
aposta = [2, 7, 21, 33, 49, 60]
resultado = [1, 14, 21, 32, 33, 34]

corretos = 0
for i, j  in enumerate(aposta):
    if j in resultado:
        corretos += 1
        print('{}o  número correto ({})'.format(i+1, j))

print('{} números corretos'.format(corretos))

#+END_SRC

#+RESULTS:
: 3o  número correto (21)
: 4o  número correto (33)
: 2 números corretos

*** List comprehension
Em python é possível gerar listas com uma espécie de loop interno chamado list comprehension. Essa funcionalidade é bastante útil quando se quer gerar vetores que seguem uma tendência lógica.

#+BEGIN_SRC python :results output :exports both
list_c = [x**2 for x in range(10)]
print(list_c)

#+END_SRC

#+RESULTS:
: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
*** Exercício
Reescrever o código do exercício de listas utilizando loops e funções. (Escrever nomes, matrículas e notas em listas, calcular as médias e imprimir formatado. ) 

#+BEGIN_EXAMPLE
Alunos: Alice, Beatriz, Carlos
Matrículas: 1, 2, 3
Notas:
  - Alice: 10, 7.5, 8.3
  - Beatriz: 8.8, 5.6, 5.0
  - Carlos: 3.4, 6.6, 7.7
#+END_EXAMPLE

#+BEGIN_EXAMPLE
Aluno    Matrícula    Média
Alice    1            M1
Beatriz  2            M2
Carlos   3            M3
#+END_EXAMPLE
*** Resolução
#+BEGIN_SRC python :results output :exports both
alunos = ['Alice', 'Beatriz', 'Carlos']
mats = [1, 2, 3]
notas = [[10, 7.5, 8.3], [8.8, 5.6, 5.0], [3.4, 6.6, 7.7]]

def media(l):
    m = sum(l)/len(l)
    return m

medias = []

for i in notas:
    medias.append(media(i))

print('Alunos\t\tMatrícula\tMédia')

"""
for i in range(len(alunos)): 
    print('{}\t\t{}\t\t{:.1f}'.format(alunos[i], mats[i], medias[i]))
"""

for i, j, k in zip(alunos, mats, medias):
    print('{}\t\t{}\t\t{:.1f}'.format(i, j, k))

#+END_SRC

#+RESULTS:
: Alunos		Matrícula	Média
: Alice		1		8.6
: Beatriz		2		6.5
: Carlos		3		5.9

* Exercícios Extras
*** Planilha de Menções
#+BEGIN_SRC python :session :results output
alunos = ['andré', 'beatriz', 'clara', 'diego', 'eduarda', 'fábio']
matriculas = [1600182, 1600945, 1600111, 1600321, 1600699, 1600099]
notas = [(2, 8, 6), (3, 10, 10), (9, 9, 8), (5, 5, 5), (10, 9, 8), (1, 2, 2)]
medias =[]
mencoes = []

# Imprimir os nomes, matrículas e notas formatados, colocando cada aluno em uma linha
# Criar função que calcula a média dos alunos e adiciona na variável médias
# Criar função que calcula a menção final dos alunos e adiciona em menção
# Imprimir Nome, Matrícula e Menção formatados, colocando cada aluno em um linha
#+END_SRC

#+RESULTS:

*** Resolução
#+BEGIN_SRC python :session :results output
# Parte 1
for i in range(len(alunos)):
    print('{}\t{}\t{}'.format(alunos[i], matriculas[i], notas[i]))

# Parte 2
def calc_med(notas):
    for i in notas:
        medias.append(sum(i)/3)
    print(medias)

calc_med(notas)

# Parte 3
def calc_menc(medias):
    for i in medias:
        if i >= 9:
            mencoes.append('SS')
        elif i >= 7:
            mencoes.append('MS')
        elif i >= 5:
            mencoes.append('MM')
        elif i >= 3:
            mencoes.append('MI')
        elif i > 0:
            mencoes.append('II')
        else: 
            mencoes.append('SR')
    # print(mencoes)

calc_menc(medias)

# Parte 4
for i in range(len(alunos)):
    print('{}\t{}\t{}'.format(alunos[i], matriculas[i], mencoes[i]))
#+END_SRC

#+RESULTS:
#+begin_example

... ... andré	1600182	(2, 8, 6)
beatriz	1600945	(3, 10, 10)
clara	1600111	(9, 9, 8)
diego	1600321	(5, 5, 5)
eduarda	1600699	(10, 9, 8)
fábio	1600099	(1, 2, 2)
... ... ... ... ... >>> [5.333333333333333, 7.666666666666667, 8.666666666666666, 5.0, 9.0, 1.6666666666666667]
>>> ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... ... >>> >>> >>> ... ... ... andré	1600182	MM
beatriz	1600945	MS
clara	1600111	MS
diego	1600321	MM
eduarda	1600699	SS
fábio	1600099	II
#+end_example
*** Filtragem de Listas
Use list comprehension para acessar valores da lista L_alpha que sejam maiores que 5 e armazená-los na lista L_beta

#+BEGIN_SRC python
L_alpha = [0, 2, 3, 5, 5, 6, 12, 43, 100]
#+END_SRC
*** Resolução
#+BEGIN_SRC python :results output :exports both
L_alpha = [0, 2, 3, 5, 5, 6, 12, 43, 100]
L_beta = [x for x in L_alpha if x > 5]
print(L_beta)
#+END_SRC

#+RESULTS:
: [6, 12, 43, 100]

