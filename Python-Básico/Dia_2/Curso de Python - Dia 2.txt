### Dia 2 - Numpy, Matplotlib e OOP ###

1. Numpy (20 min)
	- Funções do numpy
	- Praticidade com operação de matrizes
	- Import numpy as np
	- np.sin / np.cos
	- np.array()
	- np.linspace()
	- np.arrange()
	- Como fazer slices
	- Vstack e Hstack
	- Operações de Martizes (dot Vs *)
	- Mat Vs Ndarray
	- Determinante de matriz
	- Inverter Matriz
	- Solve: sistemas lineares

2. Matplotlib (10 min)
	- Funções do matplolib
	- Praticidade na plotagem de gráficos
	- from matplotlib import pyplot as plt
	- plt.plot(l1, l2, s_line_markers,**kwargs)
	- plt.title(st, fontsize=n)
	- plt.xaxis(sxa, fontsize=n)
	- plt.yaxis(sya, fontsize=n)
	- plt.legend(s1, s2, s3...)
	- plt.grid()
	- plt.fill_between
	- plt.show()

3. Exercícios (30 min)
	- Plotar momento de viga
	- "Introdução" a diferenças finitas (só dar a fórmula)
	- Plotar deformação de viga
	- Plotar equação de onda
	- Plotar sistema massa-mola-amortecedor

4. OOP (20 min)
	- O que é OOP
	- O que são classes e objetos
	- Para que serve OOP
	- Como criar uma classe
	- def __init__(self, args):
	- Criando um objeto
	- def __repr__(self, args):
	- print(objeto)
	- def method(self, args):
	- Chamando um método de objeto
	

5. Exercícios (40 min)
	- Dicionário de objetos (mapeando uma esturtura)
		- Dicionário de nós
		- Dicionário de elementos
		- Dicionário de carregamentos
	- Plotar uma estrutura
	- Equações de Momento para Distribuído e Carregado
	- Classe momento que calcula fletor de viga engastada
	- Plotar momento de viga engastada