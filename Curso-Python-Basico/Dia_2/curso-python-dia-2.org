#+author: Nasser Alkmim
#+title: Curso de Python - 2 dia
#+email: nasser.alkmim@gmail.com
#+options: toc:nil
#+OPTIONS: H:2
#+LATEX_CLASS: beamer
#+BEAMER_THEME: Madrid
#+REVEAL_THEME: solarized
#+REVEAL_PLUGINS: (highlight)

* Introdução 
*** Ementa
Nesse módulo serão tratados os seguintes assuntos:

1. Numpy
2. Matplotlib
3. OOP
*** Motivação rápida


[[file:img/msa-presentation.org_20160406_222911_.png]]
*** Motivação rápida


[[file:img/Introdução/Capture_2016-08-10_14-57-31.PNG]]

* Numpy
*** O que é numpy?

1. Biblioteca para computação científica em Python.
2. Um equivalente ao Matlab
3. Operações matriciais/vetoriais
4. Kit para álgebra linear

*** Como usar

1. Baixar a biblioteca

#+BEGIN_EXAMPLE
pip install numpy
#+END_EXAMPLE

#+BEGIN_EXAMPLE
conda install numpy
#+END_EXAMPLE

2. Importar a biblioteca

#+BEGIN_SRC python
import numpy as np
#+END_SRC

*** Criação de arrays

Arrays em 1D não são linha nem coluna
#+BEGIN_SRC ipython :session :exports both :results output 
import numpy as np
vetor = np.array([1, 2, 3, 5])

print(vetor, vetor.T)
#+END_SRC

#+RESULTS:
: [1 2 3 5] [1 2 3 5]

#+BEGIN_SRC ipython :session :exports both :results output 
matriz = np.array([[1, 2, 3],
                   [4, 5, 6]])
print(matriz)
#+END_SRC

#+RESULTS:
: [[1 2 3]
:  [4 5 6]]


*** Convertendo lista para arrays

#+BEGIN_SRC ipython :session :exports both :results output 
a = [[1, 2, 3], [10, 22, 33]]
A = np.array(a)

print('1 \n', a)
print('2 \n', A)
print('3 \n', a[1][2])
print('4 \n', A[1, 2])
#+END_SRC

#+RESULTS:
: 1 
:  [[1, 2, 3], [10, 22, 33]]
: 2 
:  [[ 1  2  3]
:  [10 22 33]]
: 3 
:  33
: 4 
:  33

*** Iniciando arrays 

#+BEGIN_SRC ipython :session :exports both :results output 
zero = np.zeros(5)
print(zero)

m_zeros = np.zeros((3,3))
print(m_zeros)
#+END_SRC

#+RESULTS:
: [ 0.  0.  0.  0.  0.]
: [[ 0.  0.  0.]
:  [ 0.  0.  0.]
:  [ 0.  0.  0.]]
*** Slicing de arrays 1D

#+BEGIN_SRC ipython :session :exports both :results output 
A = np.linspace(0, 10, 11)
print('1', A)
print('2', A[:])
print('3', A[...])
print('4', A[5:7])
print('5', A[5:])
print('6', A[::2])
#+END_SRC

#+RESULTS:
: 1 [  0.   1.   2.   3.   4.   5.   6.   7.   8.   9.  10.]
: 2 [  0.   1.   2.   3.   4.   5.   6.   7.   8.   9.  10.]
: 3 [  0.   1.   2.   3.   4.   5.   6.   7.   8.   9.  10.]
: 4 [ 5.  6.]
: 5 [  5.   6.   7.   8.   9.  10.]
: 6 [  0.   2.   4.   6.   8.  10.]

*** Slicing de arrays 2D

#+BEGIN_SRC ipython :session :exports both :results output 
np.set_printoptions(precision=1)
A = np.random.rand(5, 3)
print('1 \n', A)
print('2 \n', A[:, ...])
print('3 \n', A[:, 0])
print('4 \n', A[0, :])
#+END_SRC

#+RESULTS:
#+begin_example
1 
 [[ 0.9  0.7  0.7]
 [ 0.7  0.3  0.8]
 [ 0.8  0.2  0.2]
 [ 0.1  0.3  0.1]
 [ 0.9  0.4  0.5]]
2 
 [[ 0.9  0.7  0.7]
 [ 0.7  0.3  0.8]
 [ 0.8  0.2  0.2]
 [ 0.1  0.3  0.1]
 [ 0.9  0.4  0.5]]
3 
 [ 0.9  0.7  0.8  0.1  0.9]
4 
 [ 0.9  0.7  0.7]
#+end_example





*** Operações com matrizes

#+BEGIN_SRC  ipython :session :exports both :results output 
A = np.array([[1, 2, 3], [4, 5, 6]])
B = np.array([8, 9, 10])
c = 100
print(A, B, '\n')
print(np.shape(A), np.shape(B), '\n')
print(A*c, '\n')
print(A @ B) # Python 3.5
print(np.dot(A, B))
#+END_SRC

#+RESULTS:
#+begin_example
[[1 2 3]
 [4 5 6]] [ 8  9 10] 

(2, 3) (3,) 

[[100 200 300]
 [400 500 600]] 

[ 56 137]
[ 56 137]
#+end_example

*** Solução de sistemas lineares 


#+BEGIN_SRC ipython :session :exports both :results output 
A = np.array([[1, 2, 3], [4, 5, 6], [2, 5, 6]])
B = np.array([8, 9, 10])

# Solve Ax=B
x = np.linalg.solve(A, B)

print(A, B)
print(x)
#+END_SRC

#+RESULTS:
: [[1 2 3]
:  [4 5 6]
:  [2 5 6]] [ 8  9 10]
: [-0.5        -6.          6.83333333]
*** Produto interno 

#+BEGIN_SRC ipython :session :exports both :results output 
a = [1, 2, 3, 4, 5]
b = [3, 4, 5, 6, 7]

sum = 0
for i in range(len(a)):
    sum = sum + a[i] * b[i]
print(sum)
#+END_SRC

#+RESULTS:
: 85
*** Produto interno pythonic

#+BEGIN_SRC ipython :session :exports both :results output 
a = [1, 2, 3, 4, 5]
b = [3, 4, 5, 6, 7]

sum = 0
for x, y in zip(a, b):          # unpacking os membros da lista
    sum += x*y
print(sum)
#+END_SRC

#+RESULTS:
: 85
*** Produto interno numpy

#+BEGIN_SRC ipython :session :exports both :results output 
import numpy as np
a = np.array([1, 2, 3, 4, 5])
b = np.array([3, 4, 5, 6, 7])

print(np.sum(a*b))
#+END_SRC

#+RESULTS:
: 85
*** Produto interno álgebra linear

#+BEGIN_SRC ipython :session :exports both :results output 
import numpy as np
a = np.array([1, 2, 3, 4, 5])
b = np.array([3, 4, 5, 6, 7])

print(a @ b)
print(np.dot(a, b))
#+END_SRC

#+RESULTS:
: 85
: 85

*** Polinômios

#+BEGIN_SRC ipython :session :exports both :results output 
import numpy as np

print(np.roots([2, 0, -1]))     # p[0] * x**n + p[1] * x**(n-1) + ... + p[n-1]*x + p[n]

p = np.poly1d([1, 0, 1])        # definir um polinômio em uma variável
print(p, '\n', np.roots(p), np.roots([1, 0, 1]))
#+END_SRC

#+RESULTS:
: [-0.70710678  0.70710678]
:    2
: 1 x + 1 
:  [-0.+1.j  0.-1.j] [-0.+1.j  0.-1.j]

*** Diferenças finitas


#+BEGIN_SRC ipython :session :exports both :results output 
import numpy as np

x = np.linspace(0.78, 0.79, 100)
y = np.sin(x)
dy_analy = np.cos(x)

dy_numer = [0.0]*len(x)
# print(dy_numer)
for i in range(len(y) - 1):
    dy_numer[i] = (y[i+1] - y[i])/(x[i+1] - x[i])
dy_numer[-1] = (y[-1] - y[-2])/(x[-1] - x[-2])  # o ultimo termo
#+END_SRC

#+RESULTS:

*** Comparação

#+BEGIN_SRC ipython :session :exports both :file img/diffin.png
%matplotlib inline
import matplotlib.pyplot as plt

plt.plot(x, dy_analy, '-r', label='analytical')
plt.plot(x, dy_numer, '-b', label='forward')
plt.legend(loc='lower left')
#+END_SRC

#+RESULTS:
[[file:img/diffin.png]]
*** Integral

#+BEGIN_SRC ipython :session :exports both :results output 
import numpy as np

x = np.array([0, 0.5, 1, 1.5, 2])  # Conjunto de dados com 5 pontos
y = x**3                        # integral x4/4 0 a 2 = 4

integral = np.trapz(y, x)

error = (integral - 4)/4        # divide por 4 intervalos

print(integral, error)
#+END_SRC

#+RESULTS:
: 4.25 0.0625
*** Integral

#+BEGIN_SRC ipython :session :exports both :file img/int.png
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt

x = np.array([0, 0.5, 1, 1.5, 2])
y = x**3

x2 = np.linspace(0, 2, 50)
y2 = x2**3

plt.plot(x, y, label='5 pontos')
plt.plot(x2, y2, label='50 pontos')
plt.legend()
#+END_SRC

#+RESULTS:
[[file:img/int.png]]
*** Problema

#+BEGIN_SRC ipython :session :exports both :results output 
M = np.zeros((3,3))
print(M)
gl = [0, 2]

m = np.array([[10, 11], [12, 13]])
print(m)
#+END_SRC

#+RESULTS:
: [[ 0.  0.  0.]
:  [ 0.  0.  0.]
:  [ 0.  0.  0.]]
: [[10 11]
:  [12 13]]
*** Problema solução bruta

#+BEGIN_SRC ipython :session :exports both :results output 
M = np.zeros((3,3))
gl = [0, 2]
m = np.array([[10, 11], [12, 13]])

for i in range(len(gl)):        # loop em 0 e 1
    for j in range(len(gl)):    # loop em 0 e 1
        M[gl[i], gl[j]] = m[i, j]

print(M)
#+END_SRC

#+RESULTS:
: [[ 10.   0.  11.]
:  [  0.   0.   0.]
:  [ 12.   0.  13.]]

*** Problema pythonic

#+BEGIN_SRC ipython :session :exports both :results output 
M = np.zeros((3,3))
gl = [0, 2]
m = np.array([[10, 11], [12, 13]])

id = np.ix_(gl, gl)             # array (2, 1) e (1, 2)
print(id)

M[id] = m
print(M)
#+END_SRC

#+RESULTS:
: (array([[0],
:        [2]]), array([[0, 2]]))
: [[ 10.   0.  11.]
:  [  0.   0.   0.]
:  [ 12.   0.  13.]]


* Matplotlib
*** O que é?

1. Biblioteca para plotar gráficos 2D (principalmete)
2. Pode ser usada de duas maneiras
   1. Pyplot --> módulo equivalente ao Matlab
   2. OOP --> "pythonic way" 

*** Pyplot interface --> Matlab equilavente

#+BEGIN_SRC ipython :session plt :exports both :file img/plt1.png
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 2*np.pi, 50)
y = np.sin(x)
plt.plot(x, y, '-b', linewidth=10, color='yellow')            # Cria Figure e Axes

# Configurações
plt.xlabel('x Axis')            # Usa o Axes atual
plt.ylabel('y Axis')
plt.title('Plot de uma Senoide')
plt.xlim(0, 2*np.pi)
plt.ylim(-1, 1)
plt.legend([r'$\sin(x)$'])          # lista de strings
#+END_SRC

#+RESULTS:
[[file:img/plt1.png]]
*** Exercício

*Plotar a função*

$f(x) = 3  \cos(5x + \pi/2) + \cos(4pi/5)$

*** Exercício solução

#+BEGIN_SRC ipython :session plt :exports both :file img/pltcos.png
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 2*np.pi, 100)
y = 3*np.cos(5*x + np.pi/2) + np.cos(4*np.pi/5)
plt.plot(x, y, '-r')            # Cria Figure e Axes

# Configurações
plt.xlabel('x Axis')            # Usa o Axes atual
plt.ylabel('y Axis')
plt.title('Plot do Exercício')
plt.xlim(0, 2*np.pi)
# plt.ylim(-2, 2)
plt.legend([r'$Exercício$'])          # lista de strings
#+END_SRC

#+RESULTS:
[[file:img/pltcos.png]]


*** Plot de Iso-linhas usando o módulo Pyplot

#+BEGIN_SRC ipython :session plt :exports both :file img/plt_2.png
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 10, 20)      # 1D array
y = np.linspace(0, 10 ,20)      # 1D array
X, Y = np.meshgrid(x, y)        # 2D array
Z = np.sin(X)**2 + np.sin(Y)**2 # Valor em cada ponto do plano (x,y)

plt.contour(X, Y, Z)

# Configurações
plt.xlabel('x Axis')
plt.ylabel('y Axis')
plt.title('Plot')
#+END_SRC

#+RESULTS:
[[file:img/plt_2.png]]


*** Conceitos gerais matplotlib OOP API

1. Hierarquia

[[file:img/curso-python-dia-2.org_20160804_085108_.png]]

*** Criar Figure e Axes 


#+BEGIN_SRC ipython :session plt :exports both :file img/plt_3.png
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt  # Usa o pyploy para criar o obj Figure apenas!

fig = plt.figure()              # cria o objeto: Figure
ax = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # cria o objeto: Axes, filho da Figure
fig.show()
#+END_SRC

#+RESULTS:
[[file:img/plt_3.png]]
*** Figure contém os Axes filhos


#+BEGIN_SRC ipython :session plt :exports both :file img/plt_4.png
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt

fig = plt.figure()              
ax1 = fig.add_axes([0.1, 0.1, 0.3, 0.3]) 
ax2 = fig.add_axes([0.5, 0.5, 0.3, 0.3])
fig.show()
#+END_SRC

#+RESULTS:
[[file:img/plt_4.png]]


*** E onde vejo os dados?

1. Tudo que se vê dentro de um gráfico é chamado de *Artist*
2. Os *Artist* são criados por /métodos/ do /objeto/ *Axes*


*** Criando Artists

#+BEGIN_SRC ipython :session plt :exports both :file img/plt_5.png
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 10, 50)
y = np.sin(x)

fig = plt.figure()
ax = fig.add_axes([.1, .1, .8, .8]) # [lc, bc, wi, he]

ax.plot(x, y, '-r')             # método do objeto Axes

# Configurações 
ax.set_xlabel(r'$x$')
ax.set_ylabel(r'$y$')
#+END_SRC

#+RESULTS:
[[file:img/plt_5.png]]
*** Vantagem da abordagem OOP

#+BEGIN_SRC ipython :session plt :exports both :file img/plt_6.png
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 10, 50)
y = np.sin(x)

fig = plt.figure()              # Pyplot para criar Figure
ax1 = fig.add_axes([.1, .1, .8, .8])
ax2 = fig.add_axes([.2, .55, .3, .3])

ax1.plot(x, y, '-r')
ax2.plot(x, y, '-b')

ax2.set_xlim(0, 1)              # Um detalhe
#+END_SRC

#+RESULTS:
[[file:img/plt_6.png]]
*** 3 Dimensões - 2D arrays

#+BEGIN_SRC ipython :session plt :exports both :file img/plt_7.png
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

x = np.linspace(0, 1)
y = np.linspace(-2, 1)

X, Y = np.meshgrid(x, y)        # 2D arrays
Z = (X - 3)**2 + (Y + 1)**2     # Função do espaço (x, y)

fig = plt.figure()
ax = Axes3D(fig)
ax.plot_surface(X, Y, Z, cmap='viridis')  # Cira superfície
#+END_SRC

#+RESULTS:
[[file:img/plt_7.png]]


*** 3 Dimensões Exemplo - 1D arrays

#+BEGIN_SRC ipython :session plt :exports both :file img/plt_8.png
%matplotlib inline
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

n_angles = 36
n_radii = 8

radii = np.linspace(0.125, 1.0, n_radii)  # raios
angles = np.linspace(0, 2*np.pi, n_angles, endpoint=False)  # ângulos

angles = np.repeat(angles[..., np.newaxis], n_radii, axis=1)

x = np.append(0, (radii*np.cos(angles)).flatten())
y = np.append(0, (radii*np.sin(angles)).flatten())

z = np.sin(-x*y)                # multiplicação termo a termo

fig = plt.figure()
ax = Axes3D(fig)
ax.plot_trisurf(x, y, z, cmap='viridis')  # Cira superfície
#+END_SRC

#+RESULTS:
[[file:img/plt_8.png]]


*** Mayavi

#+BEGIN_SRC ipython :session mayavi :exports both :results output verbatim drawer
from numpy import pi, sin, cos, mgrid

dphi, dtheta = pi/250.0, pi/250.0
[phi,theta] = mgrid[0:pi+dphi*1.5:dphi, 0:2*pi+dtheta*1.5:dtheta]
m0 = 4; m1 = 3; m2 = 2; m3 = 3; m4 = 6; m5 = 2; m6 = 6; m7 = 4;

r = sin(m0*phi)**m1 + cos(m2*phi)**m3 + sin(m4*theta)**m5 + cos(m6*theta)**m7
x = r*sin(phi)*cos(theta)
y = r*cos(phi)
z = r*sin(phi)*sin(theta)

# View it.
from mayavi import mlab
s = mlab.mesh(x, y, z)
mlab.savefig('img/plt-maya.png')
print('[[file:img/plt-maya.png]]')
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:img/plt-maya.png]]
:END:

* OOP

*** O que é OOP?

1. Programação Orientada Objeto
2. É uma técnica de estruturação do programa
3. Utiliza o conceito de *Classes* e *Objetos*

*** Motivação

#+BEGIN_SRC python
# Funcionários (Objeto)
nome1 = 'João'
nome2 = 'Maria'
nome3 = 'Jose'

funcionarios = [nome1, nome2, nome3]

num_funcionarios = len(funcionarios)

# Salario de cada funcionario (Atributo)
salario1 = 10000
salario2 = 12000
salario3 = 8000
#+END_SRC

*** Como fica em formato de classe?

#+BEGIN_SRC python :results output :exports both 
class Funcionario():
    'Cria o objeto funcionario'
    contador = 0   # atributo da classe (acessado por todas as instâncias)

    def __init__(self, nome, salario):
        'Método que inicia a classe'
        self.nome = nome
        self.salario = salario
        Funcionario.contador += 1 

    def quantidade(self):
        'Método que mostra o numero de funcionarios'
        print(Funcionario.contador)

func1 = Funcionario('joão', 10000)
func2 = Funcionario('maria', 12000)
print(func1.nome, func1.salario)  # Atributos dos objetos
print(func1.quantidade())       # Invocar um método
#+END_SRC

#+RESULTS:
: joão 10000
: 2

*** O que é uma *Classe*?

1. É um _construtor_ que define um tipo de dado
2. Os dados ficam contidos num container lógico
3. Usar quando houver padrões de comportamento, qualidades e sentido nos dados
4. Contém as _instruções_ para criar um _objeto_
5. Permite a definição de *numenclatura* lógica - facilita a compreensão do código

#+BEGIN_SRC python :exports code
class NomeDaClasse():
    'Docstring explica o que a classe cria'

    def __init__(self):
        'Inicia a classe'
        self.atributo = atributo

objeto = NomeDaClasse()
print(objeto.atributo)          # Depois do '.' acesso aos atributos/métodos
#+END_SRC

*** O que é um *objeto*, *método*, *atributo*?

1. *Objeto*
   1. Invocar uma *classe* significa _instânciar_ um *objeto*
   2. Instância: significa "um exemplo", ou  "um caso"
   3. As classes definem as características inerentes do objeto
2. *Atributo*
   1. É uma qualidade do objeto
   2. Acessada com '.' =objeto.atributo=
3. *Método*
   1. É uma função definida na classe
   2. É do objeto
   3. Acessada com '.' =objeto.metodo()=


*** O que é o parâmetro =self= e o método =__init__=?

1. =self= é a própria instância (objeto) criada pela classe
2. =__init__= inicializa o objeto
*** Exemplo

1. Fazer uma classe que contenha instruções para dados de um cachorro

#+BEGIN_SRC python :results output :exports both 
class Dog():
    'Classe que define o cachorro'
    def __init__(self, name, breed, color):
        self.name = name        # Aplica os atributos
        self.breed = breed
        self.color = color

    def bark(self):
        print('{} barks!!!'.format(self.name))

meu_cachorro = Dog('Euler', 'Poodle', 'Grey')  # Instânciei a classe e criei o objeto

print(meu_cachorro.color)
print(meu_cachorro.bark())
#+END_SRC

#+RESULTS:
: Grey
: Euler barks!!!
: None

*** Exercício 

Fazer uma classe para uma conta bancária
*** Resultado

#+BEGIN_SRC python :results output :exports both 
class ContaBancaria:
    def __init__(self):
        self.balanco = 0

    def saque(self, quantia):
        self.balanco -= quantia
        return self.balanco

    def deposito(self, quantia):
        self.balanco += quantia
        return self.balanco

conta_da_maria = ContaBancaria()
conta_do_joao = ContaBancaria()

conta_da_maria.deposito(1000)
print(conta_da_maria.balanco)

conta_da_maria.saque(999)
print(conta_da_maria.balanco)
#+END_SRC

#+RESULTS:
: 1000
: 1



